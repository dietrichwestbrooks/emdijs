import { EmdiCommand, EmdiResponse, EmdiEvent, EmdiError } from './commands/emdi-command';
import { Observable } from 'rxjs';
export declare class EmdiClient {
    private service;
    private sessionId;
    private pulseInterval;
    private heartbeat;
    private isSessionValid;
    private messages;
    private accessToken;
    private subscription;
    private _connected$;
    private _disconnected$;
    private _validated$;
    private _event$;
    private _response$;
    private _request$;
    private _error$;
    isConnected: boolean;
    deviceId: number;
    egmId: string;
    constructor();
    readonly error$: Observable<EmdiError>;
    readonly connected$: Observable<boolean>;
    readonly disconnected$: Observable<boolean>;
    readonly validated$: Observable<boolean>;
    readonly event$: Observable<EmdiEvent>;
    readonly request$: Observable<EmdiCommand>;
    readonly response$: Observable<EmdiResponse>;
    connect(deviceId: number, accessToken: number): Promise<boolean>;
    validate(): Promise<boolean>;
    disconnect(): Promise<void>;
    show(): Promise<boolean>;
    hide(): Promise<boolean>;
    getEgmId(): Promise<string>;
    sendContent(mediaDisplayId: number, contentId: number, contentData: string): Promise<void>;
    subscribe(...codes: string[]): Promise<string[]>;
    private reconnect();
    private onEvent(event);
    private onResponse(response);
    private onRequest(command);
    private onError(error);
    private onConnected();
    private onDisconnected();
    private onValidated();
    private sendCommand(command);
    private setDeviceVisbleState(state);
    private sendResponse(event);
    private pulse();
    private onReceive(xml);
    private isCommsOnLineAckType(value);
    private isErrorType(value);
    private isResponseType(value);
    private isEventType(value);
    private formatXml(xml);
}
