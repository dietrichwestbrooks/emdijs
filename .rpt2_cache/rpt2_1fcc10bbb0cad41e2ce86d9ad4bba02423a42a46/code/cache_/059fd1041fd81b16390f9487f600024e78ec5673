{"code":"import { Observable, Subject, ReplaySubject } from 'rxjs';\r\nimport { RetryWebSocket } from './retry-websocket';\r\nvar BASE_PORT = 1023;\r\nvar EmdiService = /** @class */ (function () {\r\n    function EmdiService() {\r\n    }\r\n    EmdiService.prototype.connect = function (id) {\r\n        var port = BASE_PORT + id;\r\n        var url = \"ws://127.0.0.1:\" + port;\r\n        console.log(\"connecting to \" + url + \"...\");\r\n        return this.createSocketSubject(url);\r\n    };\r\n    EmdiService.prototype.createSocketSubject = function (url) {\r\n        var replay = new ReplaySubject();\r\n        var observable = Observable.create(function (obs) {\r\n            var socket = new RetryWebSocket(url);\r\n            socket.message.subscribe(function (e) { return obs.next(e); });\r\n            socket.error.subscribe(function (e) { return obs.error(e); });\r\n            socket.close.subscribe(function (e) {\r\n                if (e.wasClean) {\r\n                    obs.complete();\r\n                }\r\n                else {\r\n                    obs.error(e);\r\n                }\r\n            });\r\n            var subscription;\r\n            socket.open().then(function () {\r\n                subscription = replay.subscribe(function (data) {\r\n                    console.log('send', data);\r\n                    if (socket.readyState === WebSocket.OPEN) {\r\n                        socket.send(JSON.stringify(data));\r\n                    }\r\n                });\r\n            });\r\n            return function () {\r\n                if (socket && socket.readyState === 1) {\r\n                    socket.dispose();\r\n                }\r\n                if (subscription) {\r\n                    subscription.unsubscribe();\r\n                }\r\n            };\r\n        });\r\n        return Subject.create(replay, observable);\r\n    };\r\n    return EmdiService;\r\n}());\r\nexport { EmdiService };\r\nexport var service = new EmdiService();\r\n//# sourceMappingURL=emd-service.js.map","map":"{\"version\":3,\"file\":\"emd-service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../project/src/emd-service.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,UAAU,EAAE,OAAO,EAAY,aAAa,EAAgB,MAAM,MAAM,CAAC;AAClF,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD,IAAM,SAAS,GAAG,IAAI,CAAC;AAEvB;IACE;IAAe,CAAC;IAEhB,6BAAO,GAAP,UAAQ,EAAU;QAChB,IAAM,IAAI,GAAW,SAAS,GAAG,EAAE,CAAC;QACpC,IAAM,GAAG,GAAG,oBAAkB,IAAM,CAAC;QAErC,OAAO,CAAC,GAAG,CAAC,mBAAiB,GAAG,QAAK,CAAC,CAAC;QAEvC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;IAEO,yCAAmB,GAA3B,UAA4B,GAAW;QACrC,IAAM,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;QAEnC,IAAM,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,UAAC,GAAoB;YACxD,IAAM,MAAM,GAAG,IAAI,cAAc,CAAC,GAAG,CAAC,CAAC;YAEvC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAX,CAAW,CAAC,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAZ,CAAY,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,UAAA,CAAC;gBACtB,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACf,GAAG,CAAC,QAAQ,EAAE,CAAC;gBACjB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACf,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,YAA0B,CAAC;YAE/B,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;gBACjB,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,UAAA,IAAI;oBAClC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;oBAC1B,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;wBACzC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;oBACpC,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC;gBACL,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC;oBACtC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACnB,CAAC;gBAED,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACjB,YAAY,CAAC,WAAW,EAAE,CAAC;gBAC7B,CAAC;YACH,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAC5C,CAAC;IACH,kBAAC;AAAD,CAAC,AApDD,IAoDC;;AAED,MAAM,CAAC,IAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC\"}","dts":{"name":"C:/Aristocrat/Projects/emdijs/lib/src/emd-service.d.ts","text":"import { Subject } from 'rxjs';\r\nexport declare class EmdiService {\r\n    constructor();\r\n    connect(id: number): Subject<MessageEvent>;\r\n    private createSocketSubject(url);\r\n}\r\nexport declare const service: EmdiService;\r\n"}}
