[{"flatMessage":"Cannot find name 'Promise'.","formatted":"\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m9\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m9\u001b[0m         return Promise.resolve(_client);\r\n\u001b[30;47m \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'resolve' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                    ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'reject' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                             ~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m24\u001b[0m                         reject(new Error('Failed to connect'));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                   ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                               ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m48\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'toString' does not exist on type 'string | number'.\r\n  Property 'toString' does not exist on type 'string'.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                               ~~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m36\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'err' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m36\u001b[0m         }, err => reject(err));\r\n\u001b[30;47m  \u001b[0m \u001b[91m           ~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS4060: \u001b[0mReturn type of exported function has or is using private name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\r\n","category":1,"code":2304,"type":"semantic","fileLine":"C:/Aristocrat/Projects/emdijs/project/src/connect.ts(7,65)"},{"flatMessage":"Cannot find name 'Promise'.","formatted":"\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m9\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m9\u001b[0m         return Promise.resolve(_client);\r\n\u001b[30;47m \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'resolve' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                    ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'reject' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                             ~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m24\u001b[0m                         reject(new Error('Failed to connect'));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                   ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                               ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m48\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'toString' does not exist on type 'string | number'.\r\n  Property 'toString' does not exist on type 'string'.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                               ~~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m36\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'err' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m36\u001b[0m         }, err => reject(err));\r\n\u001b[30;47m  \u001b[0m \u001b[91m           ~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS4060: \u001b[0mReturn type of exported function has or is using private name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\r\n","category":1,"code":2304,"type":"semantic","fileLine":"C:/Aristocrat/Projects/emdijs/project/src/connect.ts(9,16)"},{"flatMessage":"Cannot find name 'Promise'.","formatted":"\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m9\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m9\u001b[0m         return Promise.resolve(_client);\r\n\u001b[30;47m \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'resolve' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                    ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'reject' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                             ~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m24\u001b[0m                         reject(new Error('Failed to connect'));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                   ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                               ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m48\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'toString' does not exist on type 'string | number'.\r\n  Property 'toString' does not exist on type 'string'.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                               ~~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m36\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'err' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m36\u001b[0m         }, err => reject(err));\r\n\u001b[30;47m  \u001b[0m \u001b[91m           ~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS4060: \u001b[0mReturn type of exported function has or is using private name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\r\n","category":1,"code":2304,"type":"semantic","fileLine":"C:/Aristocrat/Projects/emdijs/project/src/connect.ts(14,16)"},{"flatMessage":"Parameter 'resolve' implicitly has an 'any' type.","formatted":"\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m9\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m9\u001b[0m         return Promise.resolve(_client);\r\n\u001b[30;47m \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'resolve' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                    ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'reject' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                             ~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m24\u001b[0m                         reject(new Error('Failed to connect'));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                   ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                               ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m48\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'toString' does not exist on type 'string | number'.\r\n  Property 'toString' does not exist on type 'string'.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                               ~~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m36\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'err' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m36\u001b[0m         }, err => reject(err));\r\n\u001b[30;47m  \u001b[0m \u001b[91m           ~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS4060: \u001b[0mReturn type of exported function has or is using private name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\r\n","category":1,"code":7006,"type":"semantic","fileLine":"C:/Aristocrat/Projects/emdijs/project/src/connect.ts(14,37)"},{"flatMessage":"Parameter 'reject' implicitly has an 'any' type.","formatted":"\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m9\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m9\u001b[0m         return Promise.resolve(_client);\r\n\u001b[30;47m \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'resolve' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                    ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'reject' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                             ~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m24\u001b[0m                         reject(new Error('Failed to connect'));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                   ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                               ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m48\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'toString' does not exist on type 'string | number'.\r\n  Property 'toString' does not exist on type 'string'.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                               ~~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m36\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'err' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m36\u001b[0m         }, err => reject(err));\r\n\u001b[30;47m  \u001b[0m \u001b[91m           ~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS4060: \u001b[0mReturn type of exported function has or is using private name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\r\n","category":1,"code":7006,"type":"semantic","fileLine":"C:/Aristocrat/Projects/emdijs/project/src/connect.ts(14,46)"},{"flatMessage":"'Error' only refers to a type, but is being used as a value here.","formatted":"\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m9\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m9\u001b[0m         return Promise.resolve(_client);\r\n\u001b[30;47m \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'resolve' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                    ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'reject' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                             ~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m24\u001b[0m                         reject(new Error('Failed to connect'));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                   ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                               ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m48\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'toString' does not exist on type 'string | number'.\r\n  Property 'toString' does not exist on type 'string'.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                               ~~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m36\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'err' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m36\u001b[0m         }, err => reject(err));\r\n\u001b[30;47m  \u001b[0m \u001b[91m           ~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS4060: \u001b[0mReturn type of exported function has or is using private name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\r\n","category":1,"code":2693,"type":"semantic","fileLine":"C:/Aristocrat/Projects/emdijs/project/src/connect.ts(24,36)"},{"flatMessage":"'Error' only refers to a type, but is being used as a value here.","formatted":"\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m9\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m9\u001b[0m         return Promise.resolve(_client);\r\n\u001b[30;47m \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'resolve' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                    ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'reject' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                             ~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m24\u001b[0m                         reject(new Error('Failed to connect'));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                   ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                               ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m48\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'toString' does not exist on type 'string | number'.\r\n  Property 'toString' does not exist on type 'string'.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                               ~~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m36\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'err' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m36\u001b[0m         }, err => reject(err));\r\n\u001b[30;47m  \u001b[0m \u001b[91m           ~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS4060: \u001b[0mReturn type of exported function has or is using private name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\r\n","category":1,"code":2693,"type":"semantic","fileLine":"C:/Aristocrat/Projects/emdijs/project/src/connect.ts(31,32)"},{"flatMessage":"Property 'toString' does not exist on type 'string | number'.\n  Property 'toString' does not exist on type 'string'.","formatted":"\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m9\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m9\u001b[0m         return Promise.resolve(_client);\r\n\u001b[30;47m \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'resolve' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                    ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'reject' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                             ~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m24\u001b[0m                         reject(new Error('Failed to connect'));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                   ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                               ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m48\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'toString' does not exist on type 'string | number'.\r\n  Property 'toString' does not exist on type 'string'.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                               ~~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m36\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'err' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m36\u001b[0m         }, err => reject(err));\r\n\u001b[30;47m  \u001b[0m \u001b[91m           ~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS4060: \u001b[0mReturn type of exported function has or is using private name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\r\n","category":1,"code":2339,"type":"semantic","fileLine":"C:/Aristocrat/Projects/emdijs/project/src/connect.ts(31,48)"},{"flatMessage":"Parameter 'err' implicitly has an 'any' type.","formatted":"\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m9\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m9\u001b[0m         return Promise.resolve(_client);\r\n\u001b[30;47m \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'resolve' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                    ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'reject' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                             ~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m24\u001b[0m                         reject(new Error('Failed to connect'));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                   ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                               ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m48\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'toString' does not exist on type 'string | number'.\r\n  Property 'toString' does not exist on type 'string'.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                               ~~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m36\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'err' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m36\u001b[0m         }, err => reject(err));\r\n\u001b[30;47m  \u001b[0m \u001b[91m           ~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS4060: \u001b[0mReturn type of exported function has or is using private name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\r\n","category":1,"code":7006,"type":"semantic","fileLine":"C:/Aristocrat/Projects/emdijs/project/src/connect.ts(36,12)"},{"flatMessage":"Return type of exported function has or is using private name 'Promise'.","formatted":"\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m9\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m9\u001b[0m         return Promise.resolve(_client);\r\n\u001b[30;47m \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'Promise'.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m               ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'resolve' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                    ~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m14\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'reject' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m14\u001b[0m     return new Promise<EmdiClient>((resolve, reject) => {\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                             ~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m24\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m24\u001b[0m                         reject(new Error('Failed to connect'));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                   ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2693: \u001b[0m'Error' only refers to a type, but is being used as a value here.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                               ~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m31\u001b[0m:\u001b[93m48\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'toString' does not exist on type 'string | number'.\r\n  Property 'toString' does not exist on type 'string'.\r\n\r\n\u001b[30;47m31\u001b[0m                     reject(new Error(err.error.toString())));\r\n\u001b[30;47m  \u001b[0m \u001b[91m                                               ~~~~~~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m36\u001b[0m:\u001b[93m12\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'err' implicitly has an 'any' type.\r\n\r\n\u001b[30;47m36\u001b[0m         }, err => reject(err));\r\n\u001b[30;47m  \u001b[0m \u001b[91m           ~~~\u001b[0m\r\n\u001b[96mproject/src/connect.ts\u001b[0m:\u001b[93m7\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS4060: \u001b[0mReturn type of exported function has or is using private name 'Promise'.\r\n\r\n\u001b[30;47m7\u001b[0m export function connect(deviceId: number, accessToken: number): Promise<EmdiClient> {\r\n\u001b[30;47m \u001b[0m \u001b[91m                                                                ~~~~~~~\u001b[0m\r\n\r\n","category":1,"code":4060,"type":"semantic","fileLine":"C:/Aristocrat/Projects/emdijs/project/src/connect.ts(7,65)"}]
