{"code":"import { EmdiCommands, EmdiClasses, EmdiEvents } from './emdi-command';\r\nimport { ContentMessageAckCommand } from './content-message-ack';\r\nvar ContentMessageCommand = /** @class */ (function () {\r\n    function ContentMessageCommand() {\r\n        this.name = 'ContentMessage';\r\n        this.commandType = EmdiCommands.ContentMessage;\r\n        this.class = EmdiClasses.ContentToContent;\r\n    }\r\n    ContentMessageCommand.prototype.getXml = function (sessionId) {\r\n        return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n        <md:mdMsg xmlns:md=\\\"http://mediaDisplay.igt.com\\\">\\n           <cci:mdContentToContent xmlns:md=\\\"http://mediaDisplay.igt.com\\\" xmlns:cci=\\\"http://www.gamingstandards.com/emdi/schemas/v1b/CCI\\\"\\n           md:cmdType=\\\"request\\\" md:sessionId=\\\"\" + sessionId + \"\\\">\\n                <cci:contentMessage cci:mediaDisplayId=\\\"\" + this.mediaDisplayId + \"\\\" cci:contentId=\\\"\" + this.contentId + \"\\\">\\n                    <cci:contentData>\" + btoa(this.contentData) + \"</cci:contentData>\\n                </cci:contentMessage>\\n           </cci:mdContentToContent>\\n        </md:mdMsg>\";\r\n    };\r\n    return ContentMessageCommand;\r\n}());\r\nexport { ContentMessageCommand };\r\nvar ContentMessageEvent = /** @class */ (function () {\r\n    function ContentMessageEvent(data) {\r\n        this.name = 'ContentMessage';\r\n        this.eventType = EmdiEvents.ContentMessage;\r\n        this.class = EmdiClasses.ContentToContent;\r\n        this.sessionId = 0;\r\n        this.ack = new ContentMessageAckCommand();\r\n        this.contentData = [];\r\n        console.log('ContentMessageEvent =', data);\r\n        this.mediaDisplayId = +data['cci:mediaDisplayId'];\r\n        this.contentId = +data['cci:contentId'];\r\n        for (var _i = 0, _a = data['cci:contentData']; _i < _a.length; _i++) {\r\n            var contentData = _a[_i];\r\n            console.log('contentData =', atob(contentData));\r\n            this.contentData.push(atob(contentData));\r\n        }\r\n    }\r\n    return ContentMessageEvent;\r\n}());\r\nexport { ContentMessageEvent };\r\n//# sourceMappingURL=content-message.js.map","map":"{\"version\":3,\"file\":\"content-message.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../project/src/commands/content-message.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAe,YAAY,EAAE,WAAW,EAAa,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC/F,OAAO,EAAE,wBAAwB,EAAE,MAAM,uBAAuB,CAAC;AAEjE;IAAA;QACE,SAAI,GAAG,gBAAgB,CAAC;QACxB,gBAAW,GAAG,YAAY,CAAC,cAAc,CAAC;QAC1C,UAAK,GAAG,WAAW,CAAC,gBAAgB,CAAC;IAkBvC,CAAC;IAbC,sCAAM,GAAN,UAAO,SAAiB;QACtB,MAAM,CAAC,8SAGqC,SAAS,sEACC,IAAI,CAAC,cAAc,2BACvE,IAAI,CAAC,SAAS,kDAEmB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,yHAGzC,CAAC;IACnB,CAAC;IACH,4BAAC;AAAD,CAAC,AArBD,IAqBC;;AAED;IAUE,6BAAY,IAAS;QATrB,SAAI,GAAG,gBAAgB,CAAC;QACxB,cAAS,GAAG,UAAU,CAAC,cAAc,CAAC;QACtC,UAAK,GAAG,WAAW,CAAC,gBAAgB,CAAC;QACrC,cAAS,GAAG,CAAC,CAAC;QACd,QAAG,GAAG,IAAI,wBAAwB,EAAE,CAAC;QAGrC,gBAAW,GAAa,EAAE,CAAC;QAGzB,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;QAE3C,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAClD,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAExC,GAAG,CAAC,CAAsB,UAAuB,EAAvB,KAAA,IAAI,CAAC,iBAAiB,CAAC,EAAvB,cAAuB,EAAvB,IAAuB;YAA5C,IAAM,WAAW,SAAA;YACpB,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;SAC1C;IACH,CAAC;IACH,0BAAC;AAAD,CAAC,AArBD,IAqBC\"}","dts":{"name":"C:/Aristocrat/Projects/emdijs/lib/src/commands/content-message.d.ts","text":"import { EmdiCommand, EmdiCommands, EmdiClasses, EmdiEvent, EmdiEvents } from './emdi-command';\r\nimport { ContentMessageAckCommand } from './content-message-ack';\r\nexport declare class ContentMessageCommand implements EmdiCommand {\r\n    name: string;\r\n    commandType: EmdiCommands;\r\n    class: EmdiClasses;\r\n    mediaDisplayId: number;\r\n    contentId: number;\r\n    contentData: string;\r\n    getXml(sessionId: number): string;\r\n}\r\nexport declare class ContentMessageEvent implements EmdiEvent {\r\n    name: string;\r\n    eventType: EmdiEvents;\r\n    class: EmdiClasses;\r\n    sessionId: number;\r\n    ack: ContentMessageAckCommand;\r\n    mediaDisplayId: number;\r\n    contentId: number;\r\n    contentData: string[];\r\n    constructor(data: any);\r\n}\r\n"}}
