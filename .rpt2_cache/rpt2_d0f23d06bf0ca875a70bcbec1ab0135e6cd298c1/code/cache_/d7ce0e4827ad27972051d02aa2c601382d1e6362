{"code":"import { EmdiCommands, EmdiResponses, EmdiEvents, HeartbeatCommand, HeartbeatAckResponse, CommsOnLineCommand, CommsOnLineAckResponse, GetFunctionalGroupsCommand, FunctionalGroupListResponse, EventReportEvent, MeterReportEvent, HostToContentMessageEvent, EmdiError, ClearEventSubCommand, ClearMeterSubCommand, ContentMessageCommand, ContentToHostMessageCommand, GetActiveContentCommand, GetCabinetStatusCommand, GetCallAttendantStateCommand, GetCardStateCommand, GetDeviceVisibleStateCommand, GetEventSubListCommand, GetMeterInfoCommand, GetMeterSubCommand, GetSupportedEventListCommand, GetSupportedMeterListCommand, LogContentEventCommand, SetCallAttendantStateCommand, SetCardRemovedCommand, SetDeviceVisibleStateCommand, SetEventSubCommand, SetMeterSubCommand, ContentMessageEvent, EventSubListResponse, ClearEventSubAckResponse, MeterSubListResponse, ContentMessageAckResponse, ContentToHostMessageAckResponse, CabinetStatusResponse, ActiveContentListResponse, LogContentEventAckResponse, MeterReportResponse, GetEgmIdCommand, EgmIdResponse, } from './commands';\r\nimport * as xml2js from 'browser-xml2js';\r\nimport { DeviceVisibleStatusResponse } from './commands/device-visible-status';\r\nimport { CallAttendantStatusResponse } from './commands/call-attendant-status';\r\nimport { CardStatusResponse } from './commands/card-status';\r\nimport { SupportedMeterListResponse } from './commands/supported-meter-list';\r\nimport { SupportedEventListResponse } from './commands/supported-event-list';\r\nvar EmdiFactory = /** @class */ (function () {\r\n    function EmdiFactory() {\r\n    }\r\n    EmdiFactory.createCommand = function (command) {\r\n        switch (EmdiCommands[command]) {\r\n            case EmdiCommands.Heartbeat:\r\n                return new HeartbeatCommand();\r\n            case EmdiCommands.CommsOnLine:\r\n                return new CommsOnLineCommand();\r\n            case EmdiCommands.GetFunctionalGroups:\r\n                return new GetFunctionalGroupsCommand();\r\n            case EmdiCommands.ClearEventSub:\r\n                return new ClearEventSubCommand();\r\n            case EmdiCommands.ClearMeterSub:\r\n                return new ClearMeterSubCommand();\r\n            case EmdiCommands.ContentMessage:\r\n                return new ContentMessageCommand();\r\n            case EmdiCommands.ContentToHostMessage:\r\n                return new ContentToHostMessageCommand();\r\n            case EmdiCommands.GetActiveContent:\r\n                return new GetActiveContentCommand();\r\n            case EmdiCommands.GetCabinetStatus:\r\n                return new GetCabinetStatusCommand();\r\n            case EmdiCommands.GetCallAttendantState:\r\n                return new GetCallAttendantStateCommand();\r\n            case EmdiCommands.GetCardState:\r\n                return new GetCardStateCommand();\r\n            case EmdiCommands.GetDeviceVisibleState:\r\n                return new GetDeviceVisibleStateCommand();\r\n            case EmdiCommands.GetEventSubList:\r\n                return new GetEventSubListCommand();\r\n            case EmdiCommands.GetMeterInfo:\r\n                return new GetMeterInfoCommand();\r\n            case EmdiCommands.GetMeterSub:\r\n                return new GetMeterSubCommand();\r\n            case EmdiCommands.GetSupportedEventList:\r\n                return new GetSupportedEventListCommand();\r\n            case EmdiCommands.GetSupportedMeterList:\r\n                return new GetSupportedMeterListCommand();\r\n            case EmdiCommands.LogContentEvent:\r\n                return new LogContentEventCommand();\r\n            case EmdiCommands.SetCallAttendantState:\r\n                return new SetCallAttendantStateCommand();\r\n            case EmdiCommands.SetCardRemoved:\r\n                return new SetCardRemovedCommand();\r\n            case EmdiCommands.SetDeviceVisibleState:\r\n                return new SetDeviceVisibleStateCommand();\r\n            case EmdiCommands.SetEventSub:\r\n                return new SetEventSubCommand();\r\n            case EmdiCommands.SetMeterSub:\r\n                return new SetMeterSubCommand();\r\n            case EmdiCommands.GetEgmId:\r\n                return new GetEgmIdCommand();\r\n            default:\r\n                console.log('Not Found =', command);\r\n        }\r\n        return undefined;\r\n    };\r\n    EmdiFactory.createResponseOrEvent = function (xml) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                xml2js.parseString(xml, function (error, json) {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n                    console.log('json data =', json);\r\n                    var cls = Object.keys(json['md:mdMsg'])[1];\r\n                    var data = {\r\n                        xml: xml,\r\n                        class: Object.keys(json['md:mdMsg'])[1].substr(5),\r\n                        type: json['md:mdMsg'][cls][0]['$']['md:cmdType'],\r\n                        sessionId: parseInt(json['md:mdMsg'][cls][0]['$']['md:sessionId'], 10),\r\n                        error: parseInt(json['md:mdMsg'][cls][0]['$']['md:errorCode'], 10),\r\n                    };\r\n                    var cmd = Object.keys(json['md:mdMsg'][cls][0])[1];\r\n                    if (cmd) {\r\n                        data.command = {\r\n                            name: cmd.substr(cmd.indexOf(':') + 1),\r\n                            data: json['md:mdMsg'][cls][0][cmd][0],\r\n                        };\r\n                    }\r\n                    if (data.error > 0) {\r\n                        resolve(new EmdiError(data.error, data.class));\r\n                    }\r\n                    else if (data.type === 'response') {\r\n                        var response = _this.createResponse(data);\r\n                        response.sessionId = data.sessionId;\r\n                        resolve(response);\r\n                    }\r\n                    else if (data.type === 'request') {\r\n                        var event_1 = _this.createEvent(data);\r\n                        event_1.sessionId = data.sessionId;\r\n                        resolve(event_1);\r\n                    }\r\n                });\r\n            }\r\n            catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    };\r\n    EmdiFactory.createEvent = function (data) {\r\n        var event = this.toUpperCamelCase(data.command.name);\r\n        console.log('event =', event);\r\n        switch (EmdiEvents[event]) {\r\n            case EmdiEvents.EventReport:\r\n                return new EventReportEvent(data.command.data);\r\n            case EmdiEvents.MeterReport:\r\n                return new MeterReportEvent(data.command.data);\r\n            case EmdiEvents.ContentMessage:\r\n                return new ContentMessageEvent(data.command.data);\r\n            case EmdiEvents.HostToContentMessage:\r\n                return new HostToContentMessageEvent(data.command.data);\r\n            default:\r\n                throw new Error('Event not found');\r\n        }\r\n    };\r\n    EmdiFactory.createResponse = function (data) {\r\n        var response = this.toUpperCamelCase(data.command.name);\r\n        console.log('response =', response);\r\n        switch (EmdiResponses[response]) {\r\n            case EmdiResponses.HeartbeatAck:\r\n                return new HeartbeatAckResponse();\r\n            case EmdiResponses.CommsOnLineAck:\r\n                return new CommsOnLineAckResponse(data.command.data);\r\n            case EmdiResponses.FunctionalGroupList:\r\n                return new FunctionalGroupListResponse(data.command.data);\r\n            case EmdiResponses.EventSubList:\r\n                return new EventSubListResponse(data.command.data);\r\n            case EmdiResponses.MeterSubList:\r\n                return new MeterSubListResponse(data.command.data);\r\n            case EmdiResponses.ClearEventSubAck:\r\n                return new ClearEventSubAckResponse();\r\n            case EmdiResponses.ContentMessageAck:\r\n                return new ContentMessageAckResponse(data.command.data);\r\n            case EmdiResponses.DeviceVisibleStatus:\r\n                return new DeviceVisibleStatusResponse(data.command.data);\r\n            case EmdiResponses.CallAttendantStatus:\r\n                return new CallAttendantStatusResponse(data.command.data);\r\n            case EmdiResponses.CardStatus:\r\n                return new CardStatusResponse(data.command.data);\r\n            case EmdiResponses.ContentToHostMessageAck:\r\n                return new ContentToHostMessageAckResponse();\r\n            case EmdiResponses.CabinetStatus:\r\n                return new CabinetStatusResponse(data.command.data);\r\n            case EmdiResponses.SupportedMeterList:\r\n                return new SupportedMeterListResponse(data.command.data);\r\n            case EmdiResponses.ActiveContentList:\r\n                return new ActiveContentListResponse(data.command.data);\r\n            case EmdiResponses.SupportedEventList:\r\n                return new SupportedEventListResponse(data.command.data);\r\n            case EmdiResponses.LogContentEventAck:\r\n                return new LogContentEventAckResponse();\r\n            case EmdiResponses.MeterReport:\r\n                return new MeterReportResponse(data.command.data);\r\n            case EmdiResponses.ActiveContentList:\r\n                return new ActiveContentListResponse(data.command.data);\r\n            case EmdiResponses.EgmId:\r\n                return new EgmIdResponse(data.command.data);\r\n            default:\r\n                throw new Error('Response not found');\r\n        }\r\n    };\r\n    EmdiFactory.toUpperCamelCase = function (s) {\r\n        return s.charAt(0).toUpperCase() + s.slice(1);\r\n    };\r\n    return EmdiFactory;\r\n}());\r\nexport { EmdiFactory };\r\n//# sourceMappingURL=emdi-factory.js.map","map":"{\"version\":3,\"file\":\"emdi-factory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../project/src/emdi-factory.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"C:/Aristocrat/Projects/emdijs/lib/src/emdi-factory.d.ts","text":"import { EmdiCommand, EmdiResponse, EmdiEvent, EmdiError } from './commands';\r\nexport declare class EmdiFactory {\r\n    static createCommand(command: string): EmdiCommand | undefined;\r\n    static createResponseOrEvent(xml: string): Promise<EmdiResponse | EmdiEvent | EmdiError>;\r\n    private static createEvent(data);\r\n    private static createResponse(data);\r\n    private static toUpperCamelCase(s);\r\n}\r\n"}}
